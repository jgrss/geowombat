# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you don't have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@2.0.3

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.8.12
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements
      - run:
          name: Install dependencies
          command: |
            # Install GDAL
            sudo apt install software-properties-common -y 
            sudo add-apt-repository ppa:ubuntugis/ppa 
            sudo apt update && sudo apt install -y
            sudo apt install libmysqlclient-dev default-libmysqlclient-dev -y 
            sudo apt install gdal-bin libgdal-dev libspatialindex-dev g++ -y
            export CPLUS_INCLUDE_PATH=/usr/include/gdal
            export C_INCLUDE_PATH=/usr/include/gdal
            export LD_LIBRARY_PATH=/usr/local/lib 
            # Install Python GDAL
            GVAR=$(gdalinfo --version)
            GVAR2=$(echo $GVAR | sed 's/GDAL //')
            COMMA_POS=$(echo $GVAR2 | grep -b -o , | awk 'BEGIN {FS=":"}{print $1}')
            GDAL_VERSION=$(echo ${GVAR2:0:$COMMA_POS})
            # Create and activate a virtual environment
            python3 -m venv gwenv
            . gwenv/bin/activate
            pip install -U pip
            # Install pre-geowombat libraries
            # This shouldn't be necessary with pyproject.toml
            pip install Cython numpy
            pip install GDAL==$GDAL_VERSION
            # Install GeoWombat
            pip install .
            # We should be able to install these as extras (i.e., .[ml])
            pip install sklearn-xarray rtree
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
              - gwenv
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Run tests
          working_directory: ~/project/tests/
          command: |
              . /home/circleci/project/gwenv/bin/activate
              pip install testfixtures
              python -m unittest discover
  new-release:
    docker:
      - image: cimg/python:3.8.12
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Release new version
          context:
            - GITHUB_CREDENTIALS
          filters:
            branches:
              only:
                - main
          command: |
            . /home/circleci/project/gwenv/bin/activate
            pip install python-semantic-release
            semantic-release publish

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-workflow:
    jobs:
      - build-and-test
  release-workflow:
    when:
      and:
        - equal: [ main, << pipeline.git.branch >> ]
    jobs:
      - new-release
